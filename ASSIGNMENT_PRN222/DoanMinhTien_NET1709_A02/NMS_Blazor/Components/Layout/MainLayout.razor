@inherits LayoutComponentBase
@using NMS_Blazor.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (isUserLoggedIn)
            {
                <span class="me-3">
                    <i class="bi bi-person-circle me-1"></i> @userName
                </span>
                <a href="/profile" class="btn btn-outline-secondary btn-sm me-2">
                    <i class="bi bi-gear me-1"></i> Profile
                </a>
                <button @onclick="Logout" class="btn btn-outline-danger btn-sm">
                    <i class="bi bi-box-arrow-right me-1"></i> Logout
                </button>
            }
            else
            {
                <a href="/login" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-box-arrow-in-right me-1"></i> Login
                </a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    // User information
    private bool isUserLoggedIn = false;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        
        await CheckAuthenticationStatus();
    }

    private async void OnAuthenticationStateChanged(object sender, EventArgs e)
    {
        await CheckAuthenticationStatus();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CheckAuthenticationStatus()
    {
        // Get user information from AuthService
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userName = userInfo.UserName; // This will now reflect any updates made in the profile page
    }
    
    private async Task Logout()
    {
        await AuthService.Logout();
        // Navigate to home page after logout
        NavigationManager.NavigateTo("/", true);
    }
    
    public void Dispose()
    {
        // Unsubscribe from the event to prevent memory leaks
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
