@page "/categories/delete"
@using Microsoft.EntityFrameworkCore
@using NMS_BusinessObjects
@using NMS_Repositories
@using NMS_Blazor.Services
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Delete Category</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/categories">Categories</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Delete Category</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger border-0 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading category...</p>
        </div>
    }
    else if (category == null)
    {
        <div class="alert alert-warning border-0 shadow-sm">
            <i class="bi bi-exclamation-triangle me-2"></i> Category not found.
        </div>
    }
    else
    {
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card border-0 shadow">
                    <div class="card-header bg-danger text-white">
                        <h2 class="card-title h4 mb-0">
                            <i class="bi bi-trash me-2"></i> Delete Category
                        </h2>
                    </div>
                    
                    <div class="card-body">
                        <div class="alert alert-danger mb-4">
                            <h5 class="alert-heading">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i> Warning!
                            </h5>
                            <p>You are about to permanently delete the category "<strong>@category.CategoryName</strong>".</p>
                            <p class="mb-0">This action <strong>cannot</strong> be undone. Are you sure you want to proceed?</p>
                        </div>
                        
                        <div class="p-3 border rounded mb-4">
                            <div class="row">
                                <div class="col-md-6">
                                    <p class="fw-bold mb-1">Category ID:</p>
                                    <p class="text-muted">@category.CategoryId</p>
                                </div>
                                <div class="col-md-6">
                                    <p class="fw-bold mb-1">Status:</p>
                                    <p>
                                        @if (category.IsActive == true)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </p>
                                </div>
                            </div>
                            
                            <hr/>
                            
                            <div class="row mt-2">
                                <div class="col-md-12">
                                    <p class="fw-bold mb-1">Category Name:</p>
                                    <p>@category.CategoryName</p>
                                </div>
                            </div>
                            
                            <div class="row mt-2">
                                <div class="col-md-12">
                                    <p class="fw-bold mb-1">Description:</p>
                                    <p>@(string.IsNullOrEmpty(category.CategoryDesciption) ? "No description provided." : category.CategoryDesciption)</p>
                                </div>
                            </div>
                            
                            <div class="row mt-2">
                                <div class="col-md-12">
                                    <p class="fw-bold mb-1">Parent Category:</p>
                                    <p>
                                        @if (category.ParentCategory != null)
                                        {
                                            <span class="badge bg-info text-dark">@category.ParentCategory.CategoryName</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">None</span>
                                        }
                                    </p>
                                </div>
                            </div>
                        </div>
                        
                        @if (!isUserLoggedIn)
                        {
                            <div class="alert alert-warning mb-3">
                                <i class="bi bi-shield-exclamation me-2"></i>
                                You must be logged in as a staff member to delete categories.
                                <a href="/login" class="alert-link">Log in</a>
                            </div>
                        }
                        else if (userRole != 1 && userRole != 2)
                        {
                            <div class="alert alert-warning mb-3">
                                <i class="bi bi-shield-exclamation me-2"></i>
                                You don't have permission to delete categories. Staff or admin role required.
                            </div>
                        }
                        
                        @if (hasArticles)
                        {
                            <div class="alert alert-warning mb-3">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                This category has @articleCount articles associated with it and cannot be deleted.
                                You need to reassign these articles to a different category first.
                            </div>
                        }
                        
                        @if (hasChildCategories)
                        {
                            <div class="alert alert-warning mb-3">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                This category has @childCategoriesCount child categories and cannot be deleted.
                                You need to update or delete the child categories first.
                            </div>
                        }
                    </div>
                    
                    <div class="card-footer bg-white d-flex justify-content-between">
                        <a href="/categories" class="btn btn-outline-secondary">
                            <i class="bi bi-x-lg me-1"></i> Cancel
                        </a>
                        
                        <div>
                            <a href="@($"/categories/details?categoryid={category.CategoryId}")" class="btn btn-outline-primary me-2">
                                <i class="bi bi-eye me-1"></i> View Details
                            </a>
                            
                            <button @onclick="DeleteCategory" 
                                    class="btn btn-danger" 
                                    disabled="@(!isUserLoggedIn || (userRole != 1 && userRole != 2) || hasArticles || hasChildCategories)">
                                <i class="bi bi-trash me-1"></i> Confirm Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Category category;
    private string errorMessage;
    private bool isLoading = true;
    private bool isDeleting = false;
    private bool hasArticles = false;
    private bool hasChildCategories = false;
    private int articleCount = 0;
    private int childCategoriesCount = 0;
    
    // User information
    private bool isUserLoggedIn = false;
    private short? userId = null;
    private string userName = string.Empty;
    private int? userRole = null;

    [SupplyParameterFromQuery(Name = "categoryid")]
    private string CategoryIdString { get; set; }

    private short CategoryId => string.IsNullOrEmpty(CategoryIdString) ? (short)0 : short.Parse(CategoryIdString);

    protected override async Task OnInitializedAsync()
    {
        try {
            // Check authentication status
            await CheckAuthenticationStatus();
            
            // Load category data
            LoadCategoryData();

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading category: " + ex.Message;
            isLoading = false;
        }
    }
    
    private void LoadCategoryData()
    {
        try
        {
            // Load the category
            category = CategoryRepository.GetCategoryById(CategoryId);
            
            if (category == null)
            {
                errorMessage = "Category not found.";
                return;
            }
            
            // Check if there are articles using this category
            articleCount = CategoryRepository.GetArticleCountForCategory(CategoryId);
            hasArticles = articleCount > 0;
            
            // Check if there are child categories
            var childCategories = CategoryRepository.GetChildCategories(CategoryId);
            childCategoriesCount = childCategories?.Count ?? 0;
            hasChildCategories = childCategoriesCount > 0;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading category data: {ex.Message}";
        }
    }
    
    private async Task CheckAuthenticationStatus()
    {
        // Get user information from AuthService
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userId = userInfo.UserId;
        userName = userInfo.UserName;
        userRole = userInfo.UserRole;
    }

    private void DeleteCategory()
    {
        try
        {
            if (category == null) return;
            
            // Verify user permissions
            if (!isUserLoggedIn || (userRole != 1 && userRole != 2))
            {
                errorMessage = "You don't have permission to delete categories.";
                return;
            }
            
            // Verify no articles are using this category
            if (hasArticles)
            {
                errorMessage = $"Cannot delete this category because it is used by {articleCount} news articles.";
                return;
            }
            
            // Verify no child categories
            if (hasChildCategories)
            {
                errorMessage = $"Cannot delete this category because it has {childCategoriesCount} child categories.";
                return;
            }
            
            // Set deleting state to prevent multiple clicks
            isDeleting = true;

            // Delete the category using the repository
            try 
            {
                CategoryRepository.DeleteCategory(category.CategoryId);
                
                // Redirect to the list page after successful deletion
                NavigationManager.NavigateTo("/categories");
            }
            catch (Exception deleteEx)
            {
                isDeleting = false;
                errorMessage = $"Error deleting category: {deleteEx.Message}";
            }
        }
        catch (Exception ex)
        {
            isDeleting = false;
            errorMessage = "Error: " + ex.Message;
        }
    }
}
