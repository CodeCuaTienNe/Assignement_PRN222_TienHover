@page "/categories/delete"
@using Microsoft.EntityFrameworkCore
@using NMS_BusinessObjects
@inject IDbContextFactory<NMS_DAOs.FunewsManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Category</PageTitle>

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="mb-0">Delete Category</h1>
    </div>

    @if (category is null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-danger text-white">
                <h2 class="mb-0 h4">Confirm Delete</h2>
            </div>
            <div class="card-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Are you sure you want to delete this category? This action cannot be undone.
                </div>
                
                <div class="card mb-4">
                    <div class="card-header">
                        <h3 class="card-title h5 mb-0">Category Details</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-sm-3">Category ID</dt>
                            <dd class="col-sm-9">@category.CategoryId</dd>
                            
                            <dt class="col-sm-3">Category Name</dt>
                            <dd class="col-sm-9">@category.CategoryName</dd>
                            
                            <dt class="col-sm-3">Description</dt>
                            <dd class="col-sm-9">@(string.IsNullOrEmpty(category.CategoryDesciption) ? "N/A" : category.CategoryDesciption)</dd>
                            
                            <dt class="col-sm-3">Parent Category</dt>
                            <dd class="col-sm-9">@(category.ParentCategory?.CategoryName ?? "None")</dd>
                            
                            <dt class="col-sm-3">Status</dt>
                            <dd class="col-sm-9">
                                <span class="badge @(category.IsActive == true ? "bg-success" : "bg-danger")">
                                    @(category.IsActive == true ? "Active" : "Inactive")
                                </span>
                            </dd>
                        </dl>
                    </div>
                </div>
                
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <strong>Warning:</strong> Deleting a category may affect all news articles in this category.
                </div>
                
                <EditForm method="post" Model="category" OnValidSubmit="DeleteCategory" FormName="delete" Enhance>
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-danger" disabled="@(category is null)">
                            <i class="bi bi-trash me-2"></i> Delete Permanently
                        </button>
                        <a href="/categories" class="btn btn-outline-secondary">
                            <i class="bi bi-x-lg me-1"></i> Cancel
                        </a>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private Category? category;

    [SupplyParameterFromQuery]
    private short CategoryId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        category = await context.Categories.Include(c => c.ParentCategory).FirstOrDefaultAsync(m => m.CategoryId == CategoryId);

        if (category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCategory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Categories.Remove(category!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/categories");
    }
}
