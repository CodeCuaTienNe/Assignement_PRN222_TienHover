@page "/categories"
@using Microsoft.EntityFrameworkCore
@using NMS_BusinessObjects
@using NMS_Repositories
@using NMS_Blazor.Services
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Categories</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col">
            <div class="d-sm-flex justify-content-between align-items-center">
                <div>
                    <h2 class="text-dark mb-0">Category Management</h2>
                    <p class="text-muted">View, create and manage all categories</p>
                </div>
                
                @if (isUserLoggedIn && (userRole == 1 || userRole == 2))
                {
                    <a href="categories/create" class="btn btn-success mt-2 mt-sm-0">
                        <i class="bi bi-plus-circle me-1"></i> New Category
                    </a>
                }
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger border-0 shadow-sm alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
        </div>
    }

    <div class="row">
        <div class="col-lg-12">
            <div class="card border-0 shadow">
                <div class="card-header bg-white py-3">
                    <div class="row g-3 align-items-center">
                        <div class="col-md-7">
                            <div class="input-group">
                                <span class="input-group-text bg-transparent border-end-0">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control border-start-0" placeholder="Search by category name..." 
                                       @bind="SearchTerm" @bind:event="oninput" />
                                <button class="btn btn-secondary" @onclick="SearchCategories">Search</button>
                                @if (!string.IsNullOrEmpty(SearchTerm))
                                {
                                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card-body p-0">
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading categories...</p>
                        </div>
                    }
                    else if (categories == null || !categories.Any())
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-inbox display-4 text-muted"></i>
                            <p class="mt-2">No categories found matching your criteria.</p>
                            @if (!string.IsNullOrEmpty(SearchTerm))
                            {
                                <button class="btn btn-sm btn-outline-secondary" @onclick="ClearSearch">
                                    Clear Search
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover table-striped mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th class="ps-4">Category Name</th>
                                        <th>Description</th>
                                        <th>Parent Category</th>
                                        <th class="text-center">Status</th>
                                        <th class="text-end pe-4">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in categories)
                                    {
                                        <tr>
                                            <td class="ps-4">
                                                <div class="fw-medium">@item.CategoryName</div>
                                            </td>
                                            <td>
                                                <div class="small text-muted text-truncate" style="max-width: 250px;">
                                                    @(string.IsNullOrEmpty(item.CategoryDesciption) ? "—" : item.CategoryDesciption)
                                                </div>
                                            </td>
                                            <td>
                                                @if (item.ParentCategory != null)
                                                {
                                                    <span class="badge bg-info text-dark">@item.ParentCategory.CategoryName</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">—</span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                @if (item.IsActive == true)
                                                {
                                                    <span class="badge bg-success rounded-pill px-3">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary rounded-pill px-3">Inactive</span>
                                                }
                                            </td>
                                            <td class="text-end pe-4">
                                                <div class="btn-group">
                                                    <a href="@($"categories/details?categoryid={item.CategoryId.ToString()}")" 
                                                       class="btn btn-sm btn-outline-primary">
                                                        <i class="bi bi-eye me-1"></i> View
                                                    </a>
                                                    
                                                    @if (isUserLoggedIn && (userRole == 1 || userRole == 2))
                                                    {
                                                        <a href="@($"categories/edit?categoryid={item.CategoryId.ToString()}")" 
                                                           class="btn btn-sm btn-outline-secondary">
                                                            <i class="bi bi-pencil me-1"></i> Edit
                                                        </a>
                                                        <a href="@($"categories/delete?categoryid={item.CategoryId.ToString()}")" 
                                                           class="btn btn-sm btn-outline-danger">
                                                            <i class="bi bi-trash me-1"></i> Delete
                                                        </a>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Category> categories;
    private string SearchTerm { get; set; }
    private string errorMessage;
    private bool isLoading = true;
    
    // User information
    private bool isUserLoggedIn = false;
    private short? userId = null;
    private string userName = string.Empty;
    private int? userRole = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckAuthenticationStatus();
            LoadCategories();
            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
            isLoading = false;
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        // Get user information from AuthService
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userId = userInfo.UserId;
        userName = userInfo.UserName;
        userRole = userInfo.UserRole;
    }

    private void LoadCategories()
    {
        try
        {
            isLoading = true;
            
            if (!string.IsNullOrEmpty(SearchTerm))
            {
                categories = CategoryRepository.SearchCategories(SearchTerm);
            }
            else
            {
                categories = CategoryRepository.GetAllCategories();
            }
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
            categories = new List<Category>();
            isLoading = false;
        }
    }

    private void SearchCategories()
    {
        LoadCategories();
    }

    private void ClearSearch()
    {
        SearchTerm = string.Empty;
        LoadCategories();
    }
}
