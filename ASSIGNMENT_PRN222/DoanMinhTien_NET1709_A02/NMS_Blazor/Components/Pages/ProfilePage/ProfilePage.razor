@page "/profile"
@using NMS_BusinessObjects
@using NMS_Repositories
@using NMS_Blazor.Services
@using System.ComponentModel.DataAnnotations
@inject IAccountRepository AccountRepository
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ILogger<ProfilePage> Logger

<PageTitle>My Profile</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col">
            <h2 class="text-dark mb-0">My Profile</h2>
            <p class="text-muted">View and update your account information</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show border-0 shadow-sm" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @successMessage
            <button type="button" class="btn-close" @onclick="@(() => successMessage = null)"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show border-0 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading profile data...</p>
        </div>
    }
    else if (!isUserLoggedIn)
    {
        <div class="alert alert-warning border-0 shadow-sm">
            <i class="bi bi-exclamation-triangle me-2"></i> 
            You need to <a href="/login" class="alert-link">log in</a> to view your profile.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card border-0 shadow mb-4">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">Account Information</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="profileModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-4" />

                            <div class="mb-3">
                                <label for="accountName" class="form-label">Name</label>
                                <InputText id="accountName" @bind-Value="profileModel.AccountName" class="form-control" />
                                <ValidationMessage For="@(() => profileModel.AccountName)" class="text-danger" />
                                <small class="form-text text-muted">Your display name in the system.</small>
                            </div>

                            <div class="mb-3">
                                <label for="accountEmail" class="form-label">Email</label>
                                <InputText id="accountEmail" @bind-Value="profileModel.AccountEmail" class="form-control" />
                                <ValidationMessage For="@(() => profileModel.AccountEmail)" class="text-danger" />
                                <small class="form-text text-muted">Your email address for login and notifications.</small>
                            </div>

                            <div class="mb-3">
                                <label for="roleName" class="form-label">Role</label>
                                <input id="roleName" class="form-control" value="@profileModel.RoleName" readonly />
                                <small class="form-text text-muted">Role cannot be changed. Contact administrator for role changes.</small>
                            </div>

                            <hr />
                            <h5>Change Password (Optional)</h5>
                            <p class="text-muted">Leave blank if you don't want to change your password.</p>
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <InputText id="newPassword" @bind-Value="profileModel.NewPassword" type="@(showPassword ? "text" : "password")" class="form-control" />
                                <ValidationMessage For="@(() => profileModel.NewPassword)" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <div class="input-group">
                                    <InputText id="confirmPassword" @bind-Value="profileModel.ConfirmPassword" type="@(showPassword ? "text" : "password")" class="form-control" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => profileModel.ConfirmPassword)" class="text-danger" />
                            </div>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-save me-1"></i> Save Changes
                            </button>
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card border-0 shadow">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">About Your Account</h5>
                    </div>
                    <div class="card-body">
                        <p>
                            This is your personal account profile where you can update your:
                        </p>
                        <ul>
                            <li>Name - How you appear to other users</li>
                            <li>Email - Used for login and communications</li>
                            <li>Password - For account security</li>
                        </ul>
                        <p class="font-weight-bold text-danger">
                            Note: Only your role cannot be changed from this page.
                        </p>
                        <p>
                            For role changes, please contact the system administrator.
                        </p>
                        <hr />
                        <h6>Security Tips:</h6>
                        <ul>
                            <li>Use a strong password with at least 8 characters</li>
                            <li>Include numbers, special characters, and mixed case</li>
                            <li>Change your password regularly</li>
                            <li>Don't share your login credentials with others</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // User information
    private bool isUserLoggedIn = false;
    private short? userId = null;
    private int? userRole = null;

    // Form model
    private ProfileViewModel profileModel = new();

    // UI state
    private bool isLoading = true;
    private bool showPassword = false;
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            await CheckAuthenticationStatus();
            
            if (isUserLoggedIn)
            {
                LoadProfileData();
            }
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
            Logger.LogError(ex, "Error loading profile");
            isLoading = false;
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userId = userInfo.UserId;
        userRole = userInfo.UserRole;
        
        if (!isUserLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void LoadProfileData()
    {
        try
        {
            if (!userId.HasValue)
            {
                errorMessage = "Unable to retrieve user ID";
                return;
            }

            var account = AccountRepository.GetAccountById(userId.Value);
            if (account == null)
            {
                errorMessage = "Unable to find your account";
                return;
            }

            // Map account data to view model
            profileModel.AccountName = account.AccountName;
            profileModel.AccountEmail = account.AccountEmail;
            
            string roleName = account.AccountRole switch
            {
                1 => "Staff",
                2 => "Lecturer",
                3 => "Admin",
                _ => "Unknown"
            };
            
            profileModel.RoleName = roleName;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile data: {ex.Message}";
            Logger.LogError(ex, "Error loading profile data");
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            errorMessage = null;
            successMessage = null;
            
            // First check if password fields match
            if (!string.IsNullOrEmpty(profileModel.NewPassword) && 
                profileModel.NewPassword != profileModel.ConfirmPassword)
            {
                errorMessage = "The new password and confirmation password do not match.";
                return;
            }

            if (!userId.HasValue)
            {
                errorMessage = "Unable to retrieve user ID";
                return;
            }

            var account = AccountRepository.GetAccountById(userId.Value);
            if (account == null)
            {
                errorMessage = "Unable to find your account";
                return;
            }

            // Check if email already exists (but not for this user)
            if (account.AccountEmail != profileModel.AccountEmail)
            {
                if (AccountRepository.IsEmailExists(profileModel.AccountEmail))
                {
                    errorMessage = $"Email '{profileModel.AccountEmail}' is already in use by another account";
                    return;
                }
            }

            // Update name and email fields
            account.AccountName = profileModel.AccountName;
            account.AccountEmail = profileModel.AccountEmail;
            
            // Update password if provided
            if (!string.IsNullOrEmpty(profileModel.NewPassword))
            {
                account.AccountPassword = profileModel.NewPassword;
            }

            // Only role should not be updated
            // account.AccountRole should remain unchanged

            // Save changes
            AccountRepository.UpdateAccount(account);
            
            // Update session data to reflect changes
            await AuthService.RefreshUserSession();
            
            // Clear password fields
            profileModel.NewPassword = string.Empty;
            profileModel.ConfirmPassword = string.Empty;
            
            successMessage = "Your profile has been updated successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating profile: {ex.Message}";
            Logger.LogError(ex, "Error updating profile");
        }
    }

    // View model class for the profile form
    public class ProfileViewModel
    {
        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        public string AccountName { get; set; }
        
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        [Display(Name = "Email")]
        public string AccountEmail { get; set; }
        
        [Display(Name = "Role")]
        public string RoleName { get; set; }
        
        [Display(Name = "New Password")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string NewPassword { get; set; }
        
        [Display(Name = "Confirm New Password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}
