@page "/newsarticles/edit"
@using Microsoft.EntityFrameworkCore
@using NMS_BusinessObjects
@using NMS_Repositories
@using NMS_Blazor.Services
@inject INewsArticleRepository NewsArticleRepository
@inject ICategoryRepository CategoryRepository
@inject ITagRepository TagRepository 
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Edit News Article</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/newsarticles">News Articles</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Edit Article</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger border-0 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading article data...</p>
        </div>
    }
    else if (newsArticle == null)
    {
        <div class="alert alert-warning border-0 shadow-sm">
            <i class="bi bi-exclamation-triangle me-2"></i> News article not found.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-9">
                <div class="card border-0 shadow">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
                        <h3 class="card-title mb-0">Edit Article</h3>
                        <div class="badge @(isActive ? "bg-success" : "bg-secondary") rounded-pill px-3 py-2">
                            @(isActive ? "Active" : "Inactive")
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <EditForm Model="newsArticle" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-4" />
                            
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="newsArticleId" class="form-label">Article ID</label>
                                    <input id="newsArticleId" value="@newsArticle.NewsArticleId" class="form-control" disabled readonly />
                                    <small class="form-text text-muted">Article IDs cannot be modified after creation.</small>
                                </div>
                                
                                <div class="col-md-6">
                                    <label for="createdInfo" class="form-label">Creation Info</label>
                                    <input id="createdInfo" value="@(newsArticle.CreatedDate?.ToString("dd MMM yyyy") ?? "") by @(newsArticle.CreatedBy?.AccountName ?? "Unknown")" class="form-control" disabled readonly />
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="newsTitle" class="form-label">Title <span class="text-danger">*</span></label>
                                <InputText id="newsTitle" @bind-Value="newsArticle.NewsTitle" class="form-control" required />
                                <ValidationMessage For="@(() => newsArticle.NewsTitle)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="headline" class="form-label">Headline <span class="text-danger">*</span></label>
                                <InputText id="headline" @bind-Value="newsArticle.Headline" class="form-control" required />
                                <ValidationMessage For="@(() => newsArticle.Headline)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="category" class="form-label">Category <span class="text-danger">*</span></label>
                                <InputSelect id="category" @bind-Value="selectedCategoryId" class="form-select">
                                    <option value="">-- Select a category --</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.CategoryId">@category.CategoryName</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newsArticle.CategoryId)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="newsContent" class="form-label">Content <span class="text-danger">*</span></label>
                                <InputTextArea id="newsContent" @bind-Value="newsArticle.NewsContent" class="form-control" rows="10" required />
                                <ValidationMessage For="@(() => newsArticle.NewsContent)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="newsSource" class="form-label">Source</label>
                                <InputText id="newsSource" @bind-Value="newsArticle.NewsSource" class="form-control" placeholder="Enter the source of information (optional)" />
                                <ValidationMessage For="@(() => newsArticle.NewsSource)" class="text-danger" />
                            </div>
                            
                            <div class="mb-4">
                                <label class="form-label">Tags</label>
                                <div class="border rounded p-3">
                                    <div class="row g-2">
                                        @foreach (var tag in allTags)
                                        {
                                            int tagId = tag.TagId;
                                            bool isSelected = selectedTagIds.Contains(tagId);
                                            <div class="col-md-3 col-sm-4 col-6">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" 
                                                           value="@tagId" 
                                                           id="tag-@tagId" 
                                                           checked="@isSelected" 
                                                           @onchange="@(e => ToggleTag(tagId, e.Value != null && (bool)e.Value))" />
                                                    <label class="form-check-label" for="tag-@tagId">
                                                        @tag.TagName
                                                    </label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <small class="form-text text-muted">Select one or more relevant tags for this article.</small>
                            </div>
                            
                            <div class="form-check form-switch mb-4">
                                <input class="form-check-input" type="checkbox" 
                                       id="newsStatus"
                                       checked="@isActive"
                                       @onchange="@(e => isActive = e.Value != null && (bool)e.Value)" />
                                <label class="form-check-label" for="newsStatus">
                                    Article is active
                                </label>
                                <small class="d-block form-text text-muted">Inactive articles won't be visible to regular users.</small>
                            </div>
                            
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@(!isUserLoggedIn)">
                                    <i class="bi bi-save me-1"></i> Save Changes
                                </button>
                                <a href="/newsarticles" class="btn btn-outline-secondary">
                                    <i class="bi bi-arrow-left me-1"></i> Back to List
                                </a>
                                <a href="@($"/newsarticles/details?newsarticleid={newsArticle.NewsArticleId}")" class="btn btn-outline-info">
                                    <i class="bi bi-eye me-1"></i> View Details
                                </a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-3 mt-4 mt-lg-0">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">Article History</h5>
                    </div>
                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-12 col-sm-5">Created by</dt>
                            <dd class="col-12 col-sm-7">@newsArticle.CreatedBy?.AccountName</dd>
                            
                            <dt class="col-12 col-sm-5">Created on</dt>
                            <dd class="col-12 col-sm-7">@newsArticle.CreatedDate?.ToString("dd MMM yyyy")</dd>
                            
                            @if (newsArticle.ModifiedDate.HasValue)
                            {
                                <dt class="col-12 col-sm-5">Last updated</dt>
                                <dd class="col-12 col-sm-7">@newsArticle.ModifiedDate?.ToString("dd MMM yyyy")</dd>
                            }
                        </dl>
                    </div>
                </div>
                
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">Editing Tips</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item px-0">All fields marked with <span class="text-danger">*</span> are required</li>
                            <li class="list-group-item px-0">Keep headlines concise and informative</li>
                            <li class="list-group-item px-0">Add relevant tags to improve discoverability</li>
                            <li class="list-group-item px-0">Toggle the active status to control visibility</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private NewsArticle? newsArticle;
    private List<Category> categories = new List<Category>();
    private List<Tag> allTags = new List<Tag>();
    private List<int> selectedTagIds = new List<int>();
    private string? errorMessage;
    private bool isLoading = true;
    private bool isActive = true;
    private short? selectedCategoryId;
    
    // User information
    private bool isUserLoggedIn = false;
    private short? userId = null;
    private string userName = string.Empty;
    private int? userRole = null;

    [SupplyParameterFromQuery]
    private string? NewsArticleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try {
            // Check authentication status
            await CheckAuthenticationStatus();
            
            // Load article data
            LoadData();

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading article: " + ex.Message;
            isLoading = false;
        }
    }
    
    private void LoadData()
    {
        try {
            // Load categories and tags
            categories = CategoryRepository.GetAllCategories();
            allTags = TagRepository.GetAllTags();
            
            // Load the news article
            if (!string.IsNullOrEmpty(NewsArticleId))
            {
                newsArticle = NewsArticleRepository.GetNewsArticleById(NewsArticleId);
                
                if (newsArticle == null)
                {
                    errorMessage = "News article not found.";
                    return;
                }
                
                // Set selected category ID from article
                selectedCategoryId = newsArticle.CategoryId;
                
                // Set active status from article's NewsStatus
                isActive = newsArticle.NewsStatus == true;
                
                // Load article tags
                var articleTags = NewsArticleRepository.GetTagsForArticle(NewsArticleId);
                if (articleTags != null && articleTags.Any())
                {
                    selectedTagIds = articleTags.Select(t => t.TagId).ToList();
                }
            }
            else
            {
                errorMessage = "News article ID is required.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading article data: {ex.Message}";
        }
    }
    
    private async Task CheckAuthenticationStatus()
    {
        // Get user information from AuthService
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userId = userInfo.UserId;
        userName = userInfo.UserName;
        userRole = userInfo.UserRole;
        
        // Check if user has staff/admin role
        if (isUserLoggedIn && (userRole != 1 && userRole != 2)) // Not staff or admin
        {
            // Redirect to unauthorized page if not staff/admin
            NavigationManager.NavigateTo("/unauthorized");
        }
    }

    private void ToggleTag(int tagId, bool isChecked)
    {
        if (isChecked && !selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Add(tagId);
        }
        else if (!isChecked && selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Remove(tagId);
        }
    }

    private void HandleValidSubmit()
    {
        try
        {
            if (newsArticle == null) return;
            
            // Validate required fields
            if (string.IsNullOrWhiteSpace(newsArticle.NewsTitle))
            {
                errorMessage = "Title is required";
                return;
            }

            if (string.IsNullOrWhiteSpace(newsArticle.Headline))
            {
                errorMessage = "Headline is required";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(newsArticle.NewsContent))
            {
                errorMessage = "Content is required";
                return;
            }

            // Check if user is logged in
            if (!isUserLoggedIn || userId == null)
            {
                errorMessage = "You must be logged in to edit articles";
                return;
            }

            // Update modified date and user
            newsArticle.ModifiedDate = DateTime.Now;
            newsArticle.UpdatedById = userId;
            
            // Update category and status from form values
            newsArticle.CategoryId = selectedCategoryId;
            newsArticle.NewsStatus = isActive;
            
            try
            {
                // Update the news article
                NewsArticleRepository.UpdateNewsArticle(newsArticle);
                
                // Update tags
                if (selectedTagIds != null)
                {
                    try
                    {
                        NewsArticleRepository.AddTagsToArticle(newsArticle.NewsArticleId, selectedTagIds);
                    }
                    catch (Exception tagEx)
                    {
                        Console.WriteLine($"Error updating tags: {tagEx.Message}");
                        errorMessage = $"Article updated, but there was an error updating tags: {tagEx.Message}";
                        
                        // Still redirect since the article was updated
                        NavigationManager.NavigateTo("/newsarticles");
                        return;
                    }
                }

                // Everything succeeded, redirect to the list page
                NavigationManager.NavigateTo("/newsarticles");
            }
            catch (Exception dbEx)
            {
                // Handle specific database exceptions
                if (dbEx.Message.Contains("News article with title"))
                {
                    errorMessage = dbEx.Message;
                }
                else if (dbEx is Microsoft.EntityFrameworkCore.DbUpdateException updateEx)
                {
                    errorMessage = "Database error when updating: " + updateEx.InnerException?.Message ?? updateEx.Message;
                }
                else
                {
                    errorMessage = "Error updating article: " + dbEx.Message;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error updating article: " + ex.Message;
        }
    }
}