@page "/newsarticles/create"
@using NMS_BusinessObjects
@using NMS_Repositories
@using Microsoft.AspNetCore.Components.Forms
@inject INewsArticleRepository NewsArticleRepository
@inject ICategoryRepository CategoryRepository
@inject ITagRepository TagRepository
@inject NavigationManager NavigationManager

<PageTitle>Create News Article</PageTitle>

<div class="container my-4">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    
    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h2 class="mb-0">Create News Article</h2>
            </div>
            <div class="card-body">
                <EditForm Model="newsArticle" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newsTitle" class="form-label">Title <span class="text-danger">*</span></label>
                                <InputText id="newsTitle" @bind-Value="newsArticle.NewsTitle" class="form-control" required />
                                <ValidationMessage For="@(() => newsArticle.NewsTitle)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="headline" class="form-label">Headline <span class="text-danger">*</span></label>
                                <InputText id="headline" @bind-Value="newsArticle.Headline" class="form-control" required />
                                <ValidationMessage For="@(() => newsArticle.Headline)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="category" class="form-label">Category</label>
                                <InputSelect id="category" @bind-Value="selectedCategoryId" class="form-select">
                                    <option value="">-- Select Category --</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.CategoryId">@category.CategoryName</option>
                                    }
                                </InputSelect>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Tags</label>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var tag in allTags)
                                    {
                                        int tagId = tag.TagId;
                                        bool isSelected = selectedTagIds.Contains(tagId);
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   value="@tagId" 
                                                   id="tag-@tagId" 
                                                   checked="@isSelected" 
                                                   @onchange="@(e => ToggleTag(tagId, e.Value != null && (bool)e.Value))" />
                                            <label class="form-check-label" for="tag-@tagId">
                                                @tag.TagName
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newsContent" class="form-label">Content</label>
                                <InputTextArea id="newsContent" @bind-Value="newsArticle.NewsContent" class="form-control" rows="5" />
                                <ValidationMessage For="@(() => newsArticle.NewsContent)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="newsSource" class="form-label">Source</label>
                                <InputText id="newsSource" @bind-Value="newsArticle.NewsSource" class="form-control" />
                                <ValidationMessage For="@(() => newsArticle.NewsSource)" class="text-danger" />
                            </div>
                            
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" 
                                       id="newsStatus"
                                       checked="@isActive"
                                       @onchange="@(e => isActive = e.Value != null && (bool)e.Value)" />
                                <label class="form-check-label" for="newsStatus">
                                    Active
                                </label>
                            </div>
                            
                            <div class="mb-3">
                                <label for="createdByInput" class="form-label">Created By ID</label>
                                <InputNumber id="createdByInput" @bind-Value="createdById" class="form-control" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="updatedByInput" class="form-label">Updated By ID</label>
                                <InputNumber id="updatedByInput" @bind-Value="updatedById" class="form-control" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Create Article</button>
                        <a href="/newsarticles" class="btn btn-outline-secondary">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private NewsArticle newsArticle = new NewsArticle();
    private List<Category> categories = new List<Category>();
    private List<Tag> allTags = new List<Tag>();
    private List<int> selectedTagIds = new List<int>();
    private string? errorMessage;
    private bool isLoading = true;
    private bool isActive = true;
    private short? selectedCategoryId;
    private short? createdById = 1; // Default for now
    private short? updatedById = 1; // Default for now

    protected override void OnInitialized()
    {
        try {
            // Load categories and tags
            LoadLookupData();

            // Set initial values for the new article
            newsArticle = new NewsArticle
            {
                NewsArticleId = Guid.NewGuid().ToString(),
                CreatedDate = DateTime.Now,
                ModifiedDate = DateTime.Now,
                Headline = string.Empty
            };

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading page: " + ex.Message;
            isLoading = false;
        }
    }

    private void LoadLookupData()
    {
        // Load categories
        categories = CategoryRepository.GetAllCategories();
        
        // Load tags
        allTags = TagRepository.GetAllTags();
    }

    private void ToggleTag(int tagId, bool isChecked)
    {
        if (isChecked && !selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Add(tagId);
        }
        else if (!isChecked && selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Remove(tagId);
        }
    }

    private void HandleValidSubmit()
    {
        try
        {
            // Ensure dates are set
            DateTime now = DateTime.Now;
            if (!newsArticle.CreatedDate.HasValue)
            {
                newsArticle.CreatedDate = now;
            }
            
            if (!newsArticle.ModifiedDate.HasValue)
            {
                newsArticle.ModifiedDate = now;
            }

            // Set the user IDs 
            newsArticle.CreatedById = createdById;
            newsArticle.UpdatedById = updatedById;
            
            // Transfer other form values to the news article
            newsArticle.CategoryId = selectedCategoryId;
            newsArticle.NewsStatus = isActive;

            // Add the news article
            NewsArticleRepository.AddNewsArticle(newsArticle);

            // Add tags to the article if any are selected
            if (selectedTagIds.Any())
            {
                NewsArticleRepository.AddTagsToArticle(newsArticle.NewsArticleId, selectedTagIds);
            }

            // Redirect to the list page
            NavigationManager.NavigateTo("/newsarticles");
        }
        catch (Exception ex)
        {
            errorMessage = "Error creating article: " + ex.Message;
        }
    }
}