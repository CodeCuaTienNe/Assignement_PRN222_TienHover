@page "/newsarticles/create"
@using Microsoft.AspNetCore.Components.Forms
@using NMS_BusinessObjects
@using NMS_Repositories
@using NMS_Blazor.Services
@using System.ComponentModel.DataAnnotations
@inject INewsArticleRepository NewsArticleRepository
@inject ICategoryRepository CategoryRepository
@inject ITagRepository TagRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthService AuthService

<PageTitle>Create News Article</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/newsarticles">News Articles</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Create Article</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger border-0 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading form...</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card border-0 shadow">
                    <div class="card-header bg-white py-3">
                        <h3 class="card-title mb-0">Create New Article</h3>
                    </div>
                    
                    <div class="card-body">
                        <EditForm Model="newsArticle" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-4" />
                            
                            <div class="mb-3">
                                <label for="newstitle" class="form-label">Title <span class="text-danger">*</span></label>
                                <InputText id="newstitle" @bind-Value="newsArticle.NewsTitle" class="form-control" required placeholder="Enter article title" />
                                <ValidationMessage For="@(() => newsArticle.NewsTitle)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="headline" class="form-label">Headline <span class="text-danger">*</span></label>
                                <InputText id="headline" @bind-Value="newsArticle.Headline" class="form-control" required placeholder="Enter a brief headline/summary" />
                                <ValidationMessage For="@(() => newsArticle.Headline)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="newscontent" class="form-label">Content <span class="text-danger">*</span></label>
                                <InputTextArea id="newscontent" @bind-Value="newsArticle.NewsContent" class="form-control" rows="10" required placeholder="Enter the full article content" />
                                <ValidationMessage For="@(() => newsArticle.NewsContent)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="newssource" class="form-label">Source</label>
                                <InputText id="newssource" @bind-Value="newsArticle.NewsSource" class="form-control" placeholder="Enter the source of this information (optional)" />
                                <ValidationMessage For="@(() => newsArticle.NewsSource)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="categoryid" class="form-label">Category <span class="text-danger">*</span></label>
                                <InputSelect id="categoryid" @bind-Value="newsArticle.CategoryId" class="form-select" required>
                                    <option value="">-- Select a category --</option>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newsArticle.CategoryId)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label class="control-label">Tags</label>
                                <div class="border rounded p-3">
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var tag in tags)
                                        {
                                            <div class="form-check me-3">
                                                <input class="form-check-input" 
                                                       type="checkbox" 
                                                       id="tag_@tag.TagId" 
                                                       checked="@IsTagSelected(tag.TagId)"
                                                       @onchange="@(e => ToggleTagSelection(tag.TagId, e.Value != null && (bool)e.Value))" />
                                                <label class="form-check-label" for="tag_@tag.TagId">@tag.TagName</label>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <small class="form-text text-muted">Select one or more tags that apply to this article</small>
                            </div>
                            
                            <!-- Hidden fields -->
                            <input type="hidden" value="true" />
                            
                            <div class="form-group mt-4 d-flex gap-2">
                                <button type="submit" class="btn btn-primary">Create Article</button>
                                <a href="/newsarticles" class="btn btn-secondary">Back to List</a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header bg-light">Tips</div>
                    <div class="card-body">
                        <ul class="mb-0">
                            <li>All fields marked with <span class="text-danger">*</span> are required</li>
                            <li>Article ID will be automatically generated</li>
                            <li>New articles are automatically set to Active status</li>
                            <li>Select relevant tags to improve article discoverability</li>
                            <li>You can edit the article after creation</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private NewsArticle newsArticle = new NewsArticle();
    private List<Category> categories = new List<Category>();
    private List<Tag> tags = new List<Tag>();
    private HashSet<int> selectedTagIds = new HashSet<int>();
    private string errorMessage;
    private bool isLoading = true;
    
    // User information
    private bool isUserLoggedIn = false;
    private short? userId = null;
    private string userName = string.Empty;
    private int? userRole = null;

    protected override async Task OnInitializedAsync()
    {
        try {
            // Check authentication status
            await CheckAuthenticationStatus();
            
            // Only staff can create news
            if (!isUserLoggedIn || userRole != 1)
            {
                NavigationManager.NavigateTo("/unauthorized");
                return;
            }
            
            // Get categories for dropdown
            LoadCategories();
            
            // Get tags for checkboxes
            LoadTags();
            
            // Initialize with default values
            newsArticle = new NewsArticle
            {
                CreatedDate = DateTime.Now,
                CreatedById = userId ?? 0,
                NewsStatus = true // Active by default
            };

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading page: " + ex.Message;
            isLoading = false;
        }
    }
    
    private async Task CheckAuthenticationStatus()
    {
        // Get user information from AuthService
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userId = userInfo.UserId;
        userName = userInfo.UserName;
        userRole = userInfo.UserRole;
    }

    private void LoadCategories()
    {
        try 
        {
            categories = CategoryRepository.GetAllCategories();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private void LoadTags()
    {
        try 
        {
            tags = TagRepository.GetAllTags();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tags: {ex.Message}";
        }
    }

    // Tag selection methods
    private bool IsTagSelected(int tagId)
    {
        return selectedTagIds.Contains(tagId);
    }
    
    private void ToggleTagSelection(int tagId, bool isSelected)
    {
        if (isSelected)
        {
            selectedTagIds.Add(tagId);
        }
        else
        {
            selectedTagIds.Remove(tagId);
        }
        
        StateHasChanged(); // Ensure UI updates
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Validate required fields
            if (string.IsNullOrWhiteSpace(newsArticle.NewsTitle))
            {
                errorMessage = "Title is required";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(newsArticle.Headline))
            {
                errorMessage = "Headline is required";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(newsArticle.NewsContent))
            {
                errorMessage = "Content is required";
                return;
            }
            
            if (newsArticle.CategoryId == 0)
            {
                errorMessage = "Please select a category";
                return;
            }
            
            // Ensure user is logged in
            if (!isUserLoggedIn || !userId.HasValue)
            {
                errorMessage = "You must be logged in to create articles";
                return;
            }
            
            // Set/update values
            newsArticle.CreatedById = userId;
            newsArticle.CreatedDate = DateTime.Now;
            
            // Save the article - ID is automatically generated in the repository/DAO
            try
            {
                // Add the article
                NewsArticleRepository.AddNewsArticle(newsArticle);
                
                // Retrieve the created article to get its ID for tag association
                var createdArticle = NewsArticleRepository.GetNewsArticleByTitle(newsArticle.NewsTitle);
                if (createdArticle != null && selectedTagIds.Any())
                {
                    // Add selected tags to the article
                    await JSRuntime.InvokeVoidAsync("console.log", "Adding tags to article", createdArticle.NewsArticleId);
                    await JSRuntime.InvokeVoidAsync("console.log", "Selected tag IDs", selectedTagIds);
                    
                    NewsArticleRepository.AddTagsToArticle(createdArticle.NewsArticleId, selectedTagIds.ToList());
                }
                
                // Navigate to the list view
                NavigationManager.NavigateTo("/newsarticles");
            }
            catch (Exception ex)
            {
                errorMessage = "Error saving article: " + ex.Message;
                await JSRuntime.InvokeVoidAsync("console.error", "Error saving article", ex.Message);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error creating article: " + ex.Message;
            await JSRuntime.InvokeVoidAsync("console.error", "Error creating article", ex.Message);
        }
    }
}