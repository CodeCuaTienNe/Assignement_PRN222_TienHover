@page "/systemaccounts/details"
@using Microsoft.EntityFrameworkCore
@using NMS_BusinessObjects
@using NMS_Repositories
@using NMS_Blazor.Services
@inject IAccountRepository AccountRepository
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Account Details</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/systemaccounts">Accounts</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Account Details</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger border-0 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading account details...</p>
        </div>
    }
    else if (account == null)
    {
        <div class="alert alert-warning border-0 shadow-sm">
            <i class="bi bi-exclamation-triangle me-2"></i> Account not found.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center bg-white py-3">
                        <div>
                            <h3 class="card-title mb-0">@account.AccountName</h3>
                            @switch (account.AccountRole)
                            {
                                case 1:
                                    <span class="badge bg-info">Staff</span>
                                    break;
                                case 2:
                                    <span class="badge bg-danger">Lecture</span>
                                    break;
                                case 3:
                                    <span class="badge bg-primary">System Admin</span>
                                    break;
                                default:
                                    <span class="badge bg-secondary">User (@account.AccountRole)</span>
                                    break;
                            }
                        </div>
                        <div class="btn-group">
                            @if (isUserLoggedIn && (userRole == 2 || userRole == 3))
                            {
                                <a href="@($"systemaccounts/edit?accountid={account.AccountId}")" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-pencil-square me-1"></i> Edit
                                </a>
                                <a href="@($"systemaccounts/delete?accountid={account.AccountId}")" class="btn btn-outline-danger btn-sm">
                                    <i class="bi bi-trash me-1"></i> Delete
                                </a>
                            }
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <div class="mb-4">
                            <dl class="row">
                                <dt class="col-sm-3">Account Name</dt>
                                <dd class="col-sm-9">@account.AccountName</dd>
                                
                                <dt class="col-sm-3">Email</dt>
                                <dd class="col-sm-9">@account.AccountEmail</dd>
                                
                                <dt class="col-sm-3">Role</dt>
                                <dd class="col-sm-9">
                                    @switch (account.AccountRole)
                                    {
                                        case 1:
                                            <span class="badge bg-info">Staff</span>
                                            <small class="text-muted ms-2">Can create and manage content</small>
                                            break;
                                        case 2:
                                            <span class="badge bg-danger">Lecture</span>
                                            <small class="text-muted ms-2">View Only</small>
                                            break;
                                        case 3:
                                            <span class="badge bg-primary">System Admin</span>
                                            <small class="text-muted ms-2">Root access to the system</small>
                                            break;
                                        default:
                                            <span class="badge bg-secondary">User (@account.AccountRole)</span>
                                            <small class="text-muted ms-2">Regular user account</small>
                                            break;
                                    }
                                </dd>
                                
                                @if (showPassword)
                                {
                                    <dt class="col-sm-3">Password</dt>
                                    <dd class="col-sm-9">
                                        <div class="input-group">
                                            <input type="text" class="form-control" value="@account.AccountPassword" readonly />
                                            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePassword">
                                                <i class="bi bi-eye-slash"></i>
                                            </button>
                                        </div>
                                    </dd>
                                }
                                else
                                {
                                    <dt class="col-sm-3">Password</dt>
                                    <dd class="col-sm-9">
                                        <div class="input-group">
                                            <input type="password" class="form-control" value="@account.AccountPassword" readonly />
                                            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePassword">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                    </dd>
                                }
                            </dl>
                        </div>
                    </div>
                    
                    <div class="card-footer bg-white">
                        <a href="/systemaccounts" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left me-1"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4 mt-4 mt-lg-0">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">Account Information</h5>
                    </div>
                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-sm-4">Account ID</dt>
                            <dd class="col-sm-8">@account.AccountId</dd>
                        </dl>
                    </div>
                </div>
                
                @if (isUserLoggedIn && (userRole == 2 || userRole == 3))
                {
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-white">
                            <h5 class="card-title mb-0">Administrative Actions</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <a href="@($"systemaccounts/edit?accountid={account.AccountId}")" class="btn btn-outline-primary">
                                    <i class="bi bi-pencil-square me-1"></i> Edit This Account
                                </a>
                                <a href="@($"systemaccounts/delete?accountid={account.AccountId}")" class="btn btn-outline-danger">
                                    <i class="bi bi-trash me-1"></i> Delete This Account
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private SystemAccount account;
    private string errorMessage;
    private bool isLoading = true;
    private bool showPassword = false;
    
    // User information
    private bool isUserLoggedIn = false;
    private int? userRole = null;

    [SupplyParameterFromQuery(Name = "accountid")]
    private string AccountIdString { get; set; }

    private short AccountId => string.IsNullOrEmpty(AccountIdString) ? (short)0 : short.Parse(AccountIdString);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckAuthenticationStatus();
            
            // Only admin (role 2) or system admin (role 3) should access this page
            if (!isUserLoggedIn || (userRole != 2 && userRole != 3))
            {
                NavigationManager.NavigateTo("/unauthorized");
                return;
            }
            
            LoadAccountData();
            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading account: " + ex.Message;
            isLoading = false;
        }
    }
    
    private async Task CheckAuthenticationStatus()
    {
        // Get user information from AuthService
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userRole = userInfo.UserRole;
        
        // Only admin (role 2) or system admin (role 3) should access this page
        if (!isUserLoggedIn || (userRole != 2 && userRole != 3))
        {
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }
    }
    
    private void LoadAccountData()
    {
        try
        {
            // Get the account by ID from the repository
            account = AccountRepository.GetAccountById(AccountId);
            
            if (account == null)
            {
                errorMessage = "Account not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading account data: {ex.Message}";
        }
    }
    
    private void TogglePassword()
    {
        showPassword = !showPassword;
    }
}
