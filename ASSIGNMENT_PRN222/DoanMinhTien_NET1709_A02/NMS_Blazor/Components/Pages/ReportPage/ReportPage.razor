@page "/reports"
@using NMS_BusinessObjects
@using NMS_Repositories
@using NMS_Blazor.Services
@using System.Globalization
@inject IReportRepository ReportRepository
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>News Analytics Report</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col">
            <div class="d-sm-flex justify-content-between align-items-center">
                <div>
                    <h2 class="text-dark mb-0">News Analytics Report</h2>
                    <p class="text-muted">View statistics and trends of published content</p>
                </div>
                <div class="btn-group">
                    <button class="btn btn-outline-secondary" @onclick="ExportReport" disabled="@(!hasData)">
                        <i class="bi bi-download me-1"></i> Export
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="PrintReport" disabled="@(!hasData)">
                        <i class="bi bi-printer me-1"></i> Print
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger border-0 shadow-sm alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
        </div>
    }

    <div class="card border-0 shadow mb-4">
        <div class="card-header bg-white py-3">
            <h5 class="card-title mb-0">Report Parameters</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" id="startDate" class="form-control" 
                           @bind="startDate" @bind:format="yyyy-MM-dd" />
                </div>
                <div class="col-md-4">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" id="endDate" class="form-control" 
                           @bind="endDate" @bind:format="yyyy-MM-dd" />
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <div class="d-grid w-100">
                        <button class="btn btn-primary" @onclick="GenerateReport" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Loading...</span>
                            }
                            else
                            {
                                <i class="bi bi-bar-chart me-1"></i>
                                <span>Generate Report</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-12">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn @(dateRange == "7days" ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetDateRange(7)">Last 7 Days</button>
                        <button type="button" class="btn @(dateRange == "30days" ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetDateRange(30)">Last 30 Days</button>
                        <button type="button" class="btn @(dateRange == "90days" ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetDateRange(90)">Last 90 Days</button>
                        <button type="button" class="btn @(dateRange == "year" ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetDateRange(365)">Last Year</button>
                        <button type="button" class="btn @(dateRange == "custom" ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetDateRange(0)">Custom Range</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading report data...</span>
            </div>
            <p class="mt-2 text-muted">Generating report...</p>
        </div>
    }
    else if (hasData)
    {
        <div id="report-content">
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-0 shadow">
                        <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
                            <h5 class="mb-0">Report Summary</h5>
                            <div class="text-muted small">
                                <strong>Period:</strong> @startDate.ToString("MMM d, yyyy") - @endDate.ToString("MMM d, yyyy")
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="p-3 border rounded text-center mb-3">
                                        <h5>Total Articles</h5>
                                        <h2 class="text-primary mb-0">@articlesByDate.Count</h2>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="p-3 border rounded text-center mb-3">
                                        <h5>Categories</h5>
                                        <h2 class="text-success mb-0">@articlesByCategory.Count</h2>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="p-3 border rounded text-center mb-3">
                                        <h5>Authors</h5>
                                        <h2 class="text-info mb-0">@articlesByAuthor.Count</h2>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="p-3 border rounded text-center mb-3">
                                        <h5>Active Articles</h5>
                                        <h2 class="text-warning mb-0">
                                            @(articlesByStatus.TryGetValue("Active", out int activeCount) ? activeCount : 0)
                                        </h2>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-7">
                    <div class="card border-0 shadow h-100">
                        <div class="card-header bg-white py-3">
                            <h5 class="card-title mb-0">Daily Article Publication</h5>
                        </div>
                        <div class="card-body">
                            <div class="position-relative" style="height: 300px;">
                                <canvas id="dailyChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="card border-0 shadow h-100">
                        <div class="card-header bg-white py-3">
                            <h5 class="card-title mb-0">Article Status</h5>
                        </div>
                        <div class="card-body">
                            <div class="position-relative" style="height: 300px;">
                                <canvas id="statusChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card border-0 shadow h-100">
                        <div class="card-header bg-white py-3">
                            <h5 class="card-title mb-0">Articles By Category</h5>
                        </div>
                        <div class="card-body">
                            <div class="position-relative" style="height: 350px;">
                                <canvas id="categoryChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card border-0 shadow h-100">
                        <div class="card-header bg-white py-3">
                            <h5 class="card-title mb-0">Articles By Author</h5>
                        </div>
                        <div class="card-body">
                            <div class="position-relative" style="height: 350px;">
                                <canvas id="authorChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-0 shadow">
                        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">Articles List</h5>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="DownloadCSV">
                                <i class="bi bi-file-earmark-excel me-1"></i> Export to CSV
                            </button>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0" id="articlesTable">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Title</th>
                                            <th>Author</th>
                                            <th>Category</th>
                                            <th>Date</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var article in articlesByDate.OrderByDescending(a => a.CreatedDate))
                                        {
                                            <tr>
                                                <td>@article.NewsTitle</td>
                                                <td>@(article.CreatedBy?.AccountName ?? "Unknown")</td>
                                                <td>@(article.Category?.CategoryName ?? "Uncategorized")</td>
                                                <td>@article.CreatedDate?.ToString("MMM d, yyyy")</td>
                                                <td>
                                                    @if (article.NewsStatus == true)
                                                    {
                                                        <span class="badge bg-success">Active</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Inactive</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                        @if (!articlesByDate.Any())
                                        {
                                            <tr>
                                                <td colspan="5" class="text-center py-4">No articles found in the selected date range.</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card border-0 shadow">
                        <div class="card-header bg-white py-3">
                            <h5 class="card-title mb-0">Category Distribution</h5>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Category</th>
                                            <th class="text-end">Articles</th>
                                            <th class="text-end">Percentage</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int totalCategoryArticles = articlesByCategory.Values.Sum();
                                        }
                                        @foreach (var category in articlesByCategory.OrderByDescending(c => c.Value))
                                        {
                                            <tr>
                                                <td>@category.Key</td>
                                                <td class="text-end">@category.Value</td>
                                                <td class="text-end">
                                                    @(totalCategoryArticles > 0 
                                                        ? $"{(category.Value * 100.0 / totalCategoryArticles):F1}%" 
                                                        : "0%")
                                                </td>
                                            </tr>
                                        }
                                        @if (!articlesByCategory.Any())
                                        {
                                            <tr>
                                                <td colspan="3" class="text-center py-4">No categories found.</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card border-0 shadow">
                        <div class="card-header bg-white py-3">
                            <h5 class="card-title mb-0">Author Distribution</h5>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Author</th>
                                            <th class="text-end">Articles</th>
                                            <th class="text-end">Percentage</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int totalAuthorArticles = articlesByAuthor.Values.Sum();
                                        }
                                        @foreach (var author in articlesByAuthor.OrderByDescending(a => a.Value))
                                        {
                                            <tr>
                                                <td>@author.Key</td>
                                                <td class="text-end">@author.Value</td>
                                                <td class="text-end">
                                                    @(totalAuthorArticles > 0 
                                                        ? $"{(author.Value * 100.0 / totalAuthorArticles):F1}%" 
                                                        : "0%")
                                                </td>
                                            </tr>
                                        }
                                        @if (!articlesByAuthor.Any())
                                        {
                                            <tr>
                                                <td colspan="3" class="text-center py-4">No authors found.</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!isLoading)
    {
        <div class="card border-0 shadow mb-4">
            <div class="card-body text-center py-5">
                <i class="bi bi-bar-chart-steps text-muted" style="font-size: 3rem;"></i>
                <h4 class="mt-3">No Report Data</h4>
                <p class="text-muted">Select a date range and click "Generate Report" to see statistics.</p>
            </div>
        </div>
    }
</div>

@code {
    // User information
    private bool isUserLoggedIn = false;
    private int? userRole = null;
    
    // Report parameters
    private DateTime startDate = DateTime.Now.AddDays(-30);
    private DateTime endDate = DateTime.Now;
    private string dateRange = "30days";
    
    // Report data
    private List<NewsArticle> articlesByDate = new List<NewsArticle>();
    private Dictionary<string, int> articlesByCategory = new Dictionary<string, int>();
    private Dictionary<string, int> articlesByAuthor = new Dictionary<string, int>();
    private Dictionary<string, int> articlesByStatus = new Dictionary<string, int>();
    private Dictionary<string, int> articlesByDay = new Dictionary<string, int>();
    
    // UI state
    private bool isLoading = false;
    private bool hasData = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckAuthenticationStatus();
            
            // Only admin (role 2) or system admin (role 3) should access this page
            if (!isUserLoggedIn || (userRole != 2 && userRole != 3))
            {
                NavigationManager.NavigateTo("/unauthorized");
                return;
            }
            
            // Set default date range to last 30 days
            SetDateRange(30);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading page: {ex.Message}";
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        // Get user information from AuthService
        var userInfo = await AuthService.GetCurrentUser();
        
        isUserLoggedIn = userInfo.IsLoggedIn;
        userRole = userInfo.UserRole;
    }

    private void SetDateRange(int days)
    {
        if (days > 0)
        {
            endDate = DateTime.Now;
            startDate = endDate.AddDays(-days);
            
            switch (days)
            {
                case 7: dateRange = "7days"; break;
                case 30: dateRange = "30days"; break;
                case 90: dateRange = "90days"; break;
                case 365: dateRange = "year"; break;
                default: dateRange = "custom"; break;
            }
        }
        else
        {
            dateRange = "custom";
        }
    }

    private async Task GenerateReport()
    {
        isLoading = true;
        hasData = false;
        errorMessage = null;
        
        try
        {
            if (startDate > endDate)
            {
                // Swap dates if start date is after end date
                var temp = startDate;
                startDate = endDate;
                endDate = temp;
            }
            
            // Get report data from repository
            articlesByDate = ReportRepository.GetArticlesByDateRange(startDate, endDate);
            articlesByCategory = ReportRepository.GetArticleCountByCategory(startDate, endDate);
            articlesByAuthor = ReportRepository.GetArticleCountByAuthor(startDate, endDate);
            articlesByStatus = ReportRepository.GetArticleCountByStatus(startDate, endDate);
            articlesByDay = ReportRepository.GetArticleCountByDay(startDate, endDate);
            
            hasData = articlesByDate.Any();
            
            // Render charts after data is loaded and UI is updated
            if (hasData)
            {
                // Give the UI time to render before trying to access canvas elements
                await Task.Delay(500);
                await RenderChartsAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating report: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RenderChartsAsync()
    {
        try
        {
            // Prepare top categories data
            var topCategories = articlesByCategory
                .OrderByDescending(c => c.Value)
                .Take(10)
                .ToDictionary(k => k.Key, v => v.Value);
            
            // Prepare top authors data
            var topAuthors = articlesByAuthor
                .OrderByDescending(a => a.Value)
                .Take(10)
                .ToDictionary(k => k.Key, v => v.Value);
            
            // Call the consolidated function to render all charts at once
            await JSRuntime.InvokeVoidAsync("renderAllCharts", 
                articlesByDay.Keys.ToArray(), 
                articlesByDay.Values.ToArray(),
                articlesByStatus.Keys.ToArray(), 
                articlesByStatus.Values.ToArray(),
                topCategories.Keys.ToArray(),
                topCategories.Values.ToArray(),
                topAuthors.Keys.ToArray(),
                topAuthors.Values.ToArray());
        }
        catch (Exception ex)
        {
            errorMessage = $"Error rendering charts: {ex.Message}";
        }
    }
    
    private async Task DownloadCSV()
    {
        if (!hasData) return;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("exportTableToCSV", 
                $"News_Report_{startDate:yyyyMMdd}_to_{endDate:yyyyMMdd}.csv");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error exporting CSV: {ex.Message}";
        }
    }

    private async Task ExportReport()
    {
        if (!hasData) return;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("exportReportToPDF", 
                $"News_Report_{startDate:yyyyMMdd}_to_{endDate:yyyyMMdd}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error exporting report: {ex.Message}";
        }
    }

    private async Task PrintReport()
    {
        if (!hasData) return;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("printReport");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error printing report: {ex.Message}";
        }
    }
}
