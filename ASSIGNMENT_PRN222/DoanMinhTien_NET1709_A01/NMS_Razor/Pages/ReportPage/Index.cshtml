@page "/Report"
@model NMS_Razor.Pages.ReportPage.IndexModel
@{
    ViewData["Title"] = "News Statistics Report";
}

<h1>News Statistics Report</h1>
<p class="lead">Generate statistical reports for news articles over a selected period.</p>

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Select Report Period</h5>
    </div>
    <div class="card-body">
        <form method="post">
            <div class="row align-items-end">
                <div class="col-md-5 col-sm-6 mb-3">
                    <label asp-for="StartDate" class="form-label"></label>
                    <input asp-for="StartDate" class="form-control" type="date" />
                    <span asp-validation-for="StartDate" class="text-danger"></span>
                </div>
                <div class="col-md-5 col-sm-6 mb-3">
                    <label asp-for="EndDate" class="form-label"></label>
                    <input asp-for="EndDate" class="form-control" type="date" />
                    <span asp-validation-for="EndDate" class="text-danger"></span>
                </div>
                <div class="col-md-2 mb-3">
                    <button type="submit" class="btn btn-primary w-100">Generate Report</button>
                </div>
            </div>
        </form>
    </div>
</div>

@if (Model.IsPostback)
{
    <div class="alert alert-info">
        <h5>Report Summary</h5>
        <p>
            Showing data for the period: <strong>@Model.StartDate.ToString("MMM dd, yyyy")</strong> to <strong>@Model.EndDate.ToString("MMM dd, yyyy")</strong>
            <br>Total articles in this period: <strong>@Model.TotalArticles</strong>
        </p>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Articles by Category</h5>
                </div>
                <div class="card-body">
                    <canvas id="categoryChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Articles by Status</h5>
                </div>
                <div class="card-body">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5>Articles by Date</h5>
                </div>
                <div class="card-body">
                    <canvas id="dailyChart"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5>Articles by Author</h5>
                </div>
                <div class="card-body">
                    <canvas id="authorChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Articles in Period (@Model.TotalArticles)</h5>
            <button class="btn btn-sm btn-outline-secondary" onclick="exportTableToCSV('news-report.csv')">Export CSV</button>
        </div>
        <div class="card-body">
            @if (Model.TotalArticles > 0)
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="articlesTable">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Category</th>
                                <th>Created Date</th>
                                <th>Created By</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var article in Model.Articles.OrderByDescending(a => a.CreatedDate))
                            {
                                <tr>
                                    <td>@article.NewsArticleId</td>
                                    <td>@article.NewsTitle</td>
                                    <td>@(article.Category?.CategoryName ?? "Unknown")</td>
                                    <td>@article.CreatedDate?.ToString("dd/MM/yyyy")</td>
                                    <td>@(article.CreatedBy?.AccountName ?? "Unknown")</td>
                                    <td>
                                        <span class="badge @(article.NewsStatus == true ? "bg-success" : "bg-danger")">
                                            @(article.NewsStatus == true ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    No articles found in the selected date range.
                </div>
            }
        </div>
    </div>
}

@section Scripts {
    <!-- Include Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Function to export table to CSV
        function exportTableToCSV(filename) {
            var csv = [];
            var rows = document.getElementById("articlesTable").querySelectorAll("tr");
            
            for (var i = 0; i < rows.length; i++) {
                var row = [], cols = rows[i].querySelectorAll("td, th");
                
                for (var j = 0; j < cols.length; j++) 
                    row.push('"' + cols[j].innerText.replace(/"/g, '""') + '"');
                
                csv.push(row.join(","));        
            }
            
            // Download CSV file
            downloadCSV(csv.join("\n"), filename);
        }
        
        function downloadCSV(csv, filename) {
            var csvFile = new Blob([csv], {type: "text/csv"});
            var downloadLink = document.createElement("a");
            
            downloadLink.download = filename;
            downloadLink.href = window.URL.createObjectURL(csvFile);
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
        }

        @if(Model.IsPostback && Model.TotalArticles > 0)
        {
            <text>
            // Parse the JSON data
            const categoryData = @Html.Raw(Model.CategoryChartData);
            const authorData = @Html.Raw(Model.AuthorChartData);
            const statusData = @Html.Raw(Model.StatusChartData);
            const dailyData = @Html.Raw(Model.DailyChartData);
            
            // Setup colors
            const backgroundColors = [
                'rgba(54, 162, 235, 0.6)', 
                'rgba(255, 99, 132, 0.6)',
                'rgba(255, 206, 86, 0.6)', 
                'rgba(75, 192, 192, 0.6)',
                'rgba(153, 102, 255, 0.6)', 
                'rgba(255, 159, 64, 0.6)',
                'rgba(199, 199, 199, 0.6)', 
                'rgba(83, 102, 255, 0.6)',
                'rgba(40, 159, 64, 0.6)', 
                'rgba(210, 199, 199, 0.6)'
            ];
            
            // Category Chart
            const ctxCategory = document.getElementById('categoryChart').getContext('2d');
            new Chart(ctxCategory, {
                type: 'pie',
                data: {
                    labels: Object.keys(categoryData),
                    datasets: [{
                        data: Object.values(categoryData),
                        backgroundColor: backgroundColors.slice(0, Object.keys(categoryData).length)
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        title: {
                            display: true,
                            text: 'Articles by Category'
                        }
                    }
                }
            });
            
            // Status Chart
            const ctxStatus = document.getElementById('statusChart').getContext('2d');
            new Chart(ctxStatus, {
                type: 'pie',
                data: {
                    labels: Object.keys(statusData),
                    datasets: [{
                        data: Object.values(statusData),
                        backgroundColor: ['rgba(40, 167, 69, 0.6)', 'rgba(220, 53, 69, 0.6)']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        title: {
                            display: true,
                            text: 'Articles by Status'
                        }
                    }
                }
            });
            
            // Author Chart
            const ctxAuthor = document.getElementById('authorChart').getContext('2d');
            new Chart(ctxAuthor, {
                type: 'bar',
                data: {
                    labels: Object.keys(authorData),
                    datasets: [{
                        label: 'Number of Articles',
                        data: Object.values(authorData),
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Articles by Author'
                        }
                    }
                }
            });
            
            // Daily Chart
            const ctxDaily = document.getElementById('dailyChart').getContext('2d');
            new Chart(ctxDaily, {
                type: 'line',
                data: {
                    labels: Object.keys(dailyData),
                    datasets: [{
                        label: 'Articles Published',
                        data: Object.values(dailyData),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Articles by Date'
                        }
                    }
                }
            });
            </text>
        }
    </script>
}
